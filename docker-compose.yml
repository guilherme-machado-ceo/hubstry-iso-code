version: '3.8'

services:
  # Main application service
  iso-code-framework:
    build:
      context: .
      dockerfile: Dockerfile
    image: hubstry/iso-code-framework:latest
    container_name: iso-code-framework
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    volumes:
      # Mount workspace for code analysis
      - ./workspace:/app/workspace:ro
      # Mount output directory for reports
      - ./reports:/app/reports
    ports:
      - "8080:8080"
    networks:
      - iso-code-net
    healthcheck:
      test: ["CMD", "hubstry-iso-code", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service with hot reload
  iso-code-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    image: hubstry/iso-code-framework:dev
    container_name: iso-code-framework-dev
    restart: unless-stopped
    environment:
      - RUST_LOG=debug
      - RUST_BACKTRACE=full
      - CARGO_WATCH=1
    volumes:
      # Mount source code for development
      - .:/usr/src/app
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/usr/src/app/target
    ports:
      - "8081:8080"
      - "9229:9229"  # Debug port
    networks:
      - iso-code-net
    command: cargo watch -x run
    profiles:
      - dev

  # Documentation service
  docs:
    build:
      context: .
      dockerfile: Dockerfile.docs
    image: hubstry/iso-code-framework:docs
    container_name: iso-code-docs
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - iso-code-net
    profiles:
      - docs

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: iso-code-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - iso-code-net
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: iso-code-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - iso-code-net
    profiles:
      - monitoring

networks:
  iso-code-net:
    driver: bridge
    name: iso-code-network

volumes:
  cargo-cache:
    name: iso-code-cargo-cache
  target-cache:
    name: iso-code-target-cache
  prometheus-data:
    name: iso-code-prometheus-data
  grafana-data:
    name: iso-code-grafana-data

# Example usage:
# Production: docker-compose up -d
# Development: docker-compose --profile dev up -d
# With monitoring: docker-compose --profile monitoring up -d
# Documentation: docker-compose --profile docs up -d
# All services: docker-compose --profile dev --profile docs --profile monitoring up -d