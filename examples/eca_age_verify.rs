//! Exemplo de an√°lise de conformidade com o ECA Digital para verifica√ß√£o de idade.

use hubstry_iso_code::{
    models::{AnalysisResult, EngineConfig, Jurisdiction},
    semantic_engine::SemanticEngine,
};

fn main() {
    println!("üöÄ Exemplo de An√°lise de Conformidade com ECA.AGE.VERIFY\n");

    // Cen√°rio 1: C√≥digo que viola a regra (sem chamada de verifica√ß√£o de idade)
    // Nota: O c√≥digo agora √© Rust v√°lido para que o parser `syn` funcione.
    let code_without_verification = r#"
        /// ECA.AGE.VERIFY: Acesso a conte√∫do restrito
        fn access_restricted_content(user_id: &str) {
            // ERRO: Nenhuma fun√ß√£o de verifica√ß√£o de idade √© chamada aqui.
            grant_access(user_id);
        }
    "#;

    // Cen√°rio 2: C√≥digo em conformidade (com chamada de verifica√ß√£o de idade)
    let code_with_verification = r#"
        /// ECA.AGE.VERIFY: Acesso a conte√∫do restrito
        fn access_restricted_content(user_id: &str) {
            if check_age(user_id) >= 18 {
                grant_access(user_id);
            }
        }
    "#;

    // Configura√ß√£o do motor para focar na jurisdi√ß√£o do ECA
    let config = EngineConfig {
        enabled_jurisdictions: vec![Jurisdiction::Eca],
        ..Default::default()
    };

    let engine = SemanticEngine::new(config);

    println!("--- Analisando Cen√°rio 1: Viola√ß√£o ---");
    // O parsing agora √© feito com `syn`
    match syn::parse_file(code_without_verification) {
        Ok(ast) => {
            match engine.analyze(&ast) {
                Ok(results) => print_analysis_results(&results),
                Err(e) => {
                    eprintln!("Erro durante a an√°lise: {}", e);
                    eprintln!("Verifique se 'prefixes.yml' est√° presente e correto.");
                }
            }
        }
        Err(e) => {
            println!("Falha ao parsear o c√≥digo de exemplo 1: {}", e);
        }
    }


    println!("\n--- Analisando Cen√°rio 2: Conformidade ---");
    match syn::parse_file(code_with_verification) {
        Ok(ast) => {
            match engine.analyze(&ast) {
                Ok(results) => print_analysis_results(&results),
                Err(e) => {
                    eprintln!("Erro durante a an√°lise: {}", e);
                    eprintln!("Verifique se 'prefixes.yml' est√° presente e correto.");
                }
            }
        }
        Err(e) => {
            println!("Falha ao parsear o c√≥digo de exemplo 2: {}", e);
        }
    }
}

// A assinatura da fun√ß√£o foi corrigida para usar o tipo p√∫blico `AnalysisResult`
fn print_analysis_results(result: &AnalysisResult) {
    println!("  Score de Conformidade: {:.1}%", result.compliance_score);
    if result.violations.is_empty() {
        println!("  Nenhuma viola√ß√£o encontrada. ‚úÖ");
    } else {
        println!("  Viola√ß√µes Encontradas ({}):", result.violations.len());
        for violation in &result.violations {
            println!(
                "    - [{} @ L{}:C{}]: {}",
                violation.rule_id,
                violation.line.unwrap_or(0),
                violation.column.unwrap_or(0),
                violation.message
            );
            if let Some(suggestion) = &violation.suggestion {
                println!("      Sugest√£o: {}", suggestion);
            }
        }
    }
}